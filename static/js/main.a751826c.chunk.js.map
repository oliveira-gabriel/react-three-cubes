{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","SpinningMesh","position","args","color","mesh","speed","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","onClick","castShadow","ref","attach","MeshWobbleMaterial","App","shadows","camera","fov","intensity","Math","PI","receiveShadow","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAWAA,cACA,IAAMC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAChCC,GADmD,EAAZC,MAChCC,iBAAO,OACpBC,aAAS,kBAAOH,EAAKI,QAAQC,SAASC,EAAIN,EAAKI,QAAQC,SAASE,GAAK,OAGrE,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAQC,oBAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAE3C,OACE,eAAC,IAAET,KAAH,CACEc,QAAS,kBAAMJ,GAAWD,IAC1BI,MAAOF,EAAME,MACbE,YAAU,EACVlB,SAAUA,EACVmB,IAAKhB,EALP,UAOE,mCAAmBiB,OAAO,WAAWnB,KAAMA,IAC3C,cAACoB,EAAA,EAAD,CAAoBD,OAAO,WAAWlB,MAAQU,EAAD,MAAUV,QA6D9CoB,MAzDf,WACE,OACE,mCACE,eAAC,IAAD,CAAQC,SAAO,EAACC,OAAQ,CAAExB,SAAU,EAAE,EAAG,EAAG,IAAKyB,IAAK,IAAtD,UACE,8BAAcC,UAAW,KACzB,kCACER,YAAU,EACVlB,SAAU,CAAC,EAAG,GAAI,GAClB0B,UAAW,IACX,uBAAsB,KACtB,wBAAuB,KACvB,oBAAmB,GACnB,sBAAqB,GACrB,sBAAqB,GACrB,oBAAmB,GACnB,wBAAuB,KAGzB,4BAAY1B,SAAU,EAAE,GAAI,GAAI,IAAK0B,UAAW,KAChD,4BAAY1B,SAAU,CAAC,GAAI,GAAI,GAAI0B,UAAW,MAE9C,kCAEE,uBACElB,SAAU,EAAEmB,KAAKC,GAAK,EAAG,EAAG,GAC5B5B,SAAU,CAAC,GAAI,EAAG,GAClB6B,eAAa,EAHf,UAKE,qCAAqBT,OAAO,WAAWnB,KAAM,CAAC,IAAK,OACnD,gCAAgBmB,OAAO,WAAWU,QAAS,QAE7C,cAAC,EAAD,CACE9B,SAAU,CAAC,EAAG,EAAG,GACjBE,MAAM,YACND,KAAM,CAAC,EAAG,EAAG,GACbG,MAAO,IAET,cAAC,EAAD,CAAcJ,SAAU,EAAE,EAAG,GAAI,GAAIE,MAAM,OAAOE,MAAO,IACzD,cAAC,EAAD,CAAcJ,SAAU,CAAC,EAAG,GAAI,GAAIE,MAAM,OAAOE,MAAO,OAa1D,cAAC2B,EAAA,EAAD,UC1EOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a751826c.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport \"./App.scss\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport {\n  MeshWobbleMaterial,\n  OrbitControls,\n  softShadows,\n} from \"@react-three/drei\";\n\nimport { useSpring, a } from \"@react-spring/three\";\n\nsoftShadows();\nconst SpinningMesh = ({ position, args, color, speed }) => {\n  const mesh = useRef(null);\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  //\n  const [expand, setExpand] = useState(false);\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow\n      position={position}\n      ref={mesh}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n      <MeshWobbleMaterial attach=\"material\" color={!expand ? color : `red`} />\n    </a.mesh>\n  );\n};\nfunction App() {\n  return (\n    <>\n      <Canvas shadows camera={{ position: [-5, 2, 10], fov: 60 }}>\n        <ambientLight intensity={0.3} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n\n        <group>\n          {/* This mesh is the plane (The floor) */}\n          <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -3, 0]}\n            receiveShadow\n          >\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <shadowMaterial attach=\"material\" opacity={0.3} />\n          </mesh>\n          <SpinningMesh\n            position={[0, 1, 0]}\n            color=\"lightblue\"\n            args={[3, 2, 1]}\n            speed={2}\n          />\n          <SpinningMesh position={[-2, 1, -5]} color=\"pink\" speed={6} />\n          <SpinningMesh position={[5, 1, -2]} color=\"pink\" speed={6} />\n        </group>\n        {/* <ContactShadows\n          rotation-x={Math.PI / 2}\n          position={[0, -1, 0]}\n          opacity={0.75}\n          width={10}\n          height={10}\n          blur={2.6}\n          far={2}\n          args={[10, 10, 10]}\n        /> */}\n\n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}